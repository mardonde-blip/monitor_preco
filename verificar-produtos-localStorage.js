// Script para verificar produtos no localStorage e testar monitoramento
const puppeteer = require('puppeteer');

async function verificarProdutosLocalStorage() {
    console.log('üîç VERIFICANDO PRODUTOS NO LOCALSTORAGE');
    console.log('=====================================');
    
    let browser;
    try {
        browser = await puppeteer.launch({ headless: true });
        const page = await browser.newPage();
        
        // Navegar para a aplica√ß√£o
        console.log('üì± Acessando aplica√ß√£o...');
        await page.goto('http://localhost:3000', { waitUntil: 'networkidle0' });
        
        // Verificar produtos no localStorage
        const produtos = await page.evaluate(() => {
            const produtosStr = localStorage.getItem('products');
            return produtosStr ? JSON.parse(produtosStr) : [];
        });
        
        console.log(`üì¶ Produtos encontrados: ${produtos.length}`);
        
        if (produtos.length > 0) {
            console.log('\nüìã DETALHES DOS PRODUTOS:');
            produtos.forEach((produto, index) => {
                console.log(`\n${index + 1}. ${produto.name || 'Nome n√£o definido'}`);
                console.log(`   URL: ${produto.url || 'URL n√£o definida'}`);
                console.log(`   Pre√ßo Atual: R$ ${produto.currentPrice || 'N/A'}`);
                console.log(`   Pre√ßo Alvo: R$ ${produto.targetPrice || 'N/A'}`);
                console.log(`   Deve Alertar: ${produto.currentPrice && produto.targetPrice && produto.currentPrice <= produto.targetPrice ? 'üö® SIM' : '‚ùå N√ÉO'}`);
            });
        }
        
        // Verificar configura√ß√µes de notifica√ß√£o
        const notificationSettings = await page.evaluate(() => {
            const settingsStr = localStorage.getItem('notificationSettings');
            return settingsStr ? JSON.parse(settingsStr) : null;
        });
        
        console.log('\nüîî CONFIGURA√á√ïES DE NOTIFICA√á√ÉO:');
        if (notificationSettings) {
            console.log(`   Habilitadas: ${notificationSettings.enabled ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
            console.log(`   Bot Token: ${notificationSettings.botToken ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
            console.log(`   Chat ID: ${notificationSettings.chatId ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
        } else {
            console.log('   ‚ùå Configura√ß√µes n√£o encontradas');
        }
        
        // Verificar status do scheduler
        const schedulerStatus = await page.evaluate(() => {
            const statusStr = localStorage.getItem('schedulerStatus');
            return statusStr ? JSON.parse(statusStr) : null;
        });
        
        console.log('\n‚è∞ STATUS DO SCHEDULER:');
        if (schedulerStatus) {
            console.log(`   Ativo: ${schedulerStatus.isActive ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
            console.log(`   √öltima verifica√ß√£o: ${schedulerStatus.lastCheck || 'Nunca'}`);
        } else {
            console.log('   ‚ùå Status n√£o encontrado');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar localStorage:', error.message);
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

async function testarAPIScheduler() {
    console.log('\nüîç TESTANDO API DO SCHEDULER');
    console.log('============================');
    
    try {
        // Testar status do scheduler
        const statusResponse = await fetch('http://localhost:3000/api/scheduler/status');
        if (statusResponse.ok) {
            const status = await statusResponse.json();
            console.log('‚úÖ API Status funcionando');
            console.log(`   Scheduler ativo: ${status.isActive ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
            console.log(`   √öltima verifica√ß√£o: ${status.lastCheck || 'Nunca'}`);
        } else {
            console.log('‚ùå Erro ao acessar API Status:', statusResponse.status);
        }
        
        // Testar verifica√ß√£o manual
        console.log('\nüîÑ Testando verifica√ß√£o manual...');
        const checkResponse = await fetch('http://localhost:3000/api/scheduler/check', {
            method: 'POST'
        });
        
        if (checkResponse.ok) {
            const result = await checkResponse.json();
            console.log('‚úÖ Verifica√ß√£o manual executada');
            console.log(`   Produtos verificados: ${result.productsChecked || 0}`);
            console.log(`   Alertas enviados: ${result.alertsSent || 0}`);
            if (result.errors && result.errors.length > 0) {
                console.log('   ‚ö†Ô∏è Erros encontrados:');
                result.errors.forEach(error => console.log(`     - ${error}`));
            }
        } else {
            console.log('‚ùå Erro na verifica√ß√£o manual:', checkResponse.status);
            const errorText = await checkResponse.text();
            console.log('   Detalhes:', errorText);
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao testar API:', error.message);
    }
}

async function main() {
    await verificarProdutosLocalStorage();
    await testarAPIScheduler();
    
    console.log('\nüìã RESUMO E PR√ìXIMOS PASSOS:');
    console.log('============================');
    console.log('1. ‚úÖ Verifique se h√° produtos cadastrados acima');
    console.log('2. ‚úÖ Confirme se as notifica√ß√µes est√£o habilitadas');
    console.log('3. ‚ùó Configure o Chat ID no .env.local (substitua "your_chat_id_here")');
    console.log('4. üîÑ Execute uma verifica√ß√£o manual na interface');
    console.log('5. üì± Use @userinfobot no Telegram para obter seu Chat ID');
}

main().catch(console.error);