// Teste com a URL real do Vercel
require('dotenv').config({ path: '.env.local' });

// URLs poss√≠veis do Vercel baseadas no reposit√≥rio GitHub
const POSSIBLE_URLS = [
  'https://monitor-preco.vercel.app',
  'https://monitor-preco-git-main-mardonde-blip.vercel.app',
  'https://monitor-preco-mardonde-blip.vercel.app'
];

async function testarURLsVercel() {
  console.log('üåê TESTANDO URLs DO VERCEL');
  console.log('=========================');
  console.log('üìÇ Reposit√≥rio: https://github.com/mardonde-blip/monitor_preco.git');
  console.log('');

  let urlFuncionando = null;

  for (const url of POSSIBLE_URLS) {
    console.log(`üîç Testando: ${url}`);
    
    try {
      const response = await fetch(url, { 
        method: 'GET',
        timeout: 10000 // 10 segundos de timeout
      });
      
      if (response.ok) {
        console.log(`‚úÖ ENCONTRADA! ${url} est√° funcionando!`);
        urlFuncionando = url;
        break;
      } else {
        console.log(`‚ùå ${response.status} - ${response.statusText}`);
      }
    } catch (error) {
      console.log(`‚ùå Erro: ${error.message}`);
    }
    
    console.log('');
  }

  if (urlFuncionando) {
    console.log('üéâ APLICA√á√ÉO ENCONTRADA EM PRODU√á√ÉO!');
    console.log(`üîó URL: ${urlFuncionando}`);
    console.log('');
    
    // Testar API do scheduler
    console.log('üöÄ Testando API do scheduler...');
    
    try {
      const schedulerResponse = await fetch(`${urlFuncionando}/api/scheduler`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      if (schedulerResponse.ok) {
        const resultado = await schedulerResponse.json();
        console.log('‚úÖ API do scheduler funcionando!');
        console.log('üìä Resultado:', JSON.stringify(resultado, null, 2));
        
        if (resultado.success && resultado.data) {
          const { checked, notifications, errors } = resultado.data;
          
          console.log('');
          console.log('üìä ESTAT√çSTICAS DA VERIFICA√á√ÉO:');
          console.log(`üì¶ Produtos verificados: ${checked || 0}`);
          console.log(`üì± Notifica√ß√µes enviadas: ${notifications || 0}`);
          console.log(`‚ùå Erros encontrados: ${errors || 0}`);
          
          if (notifications > 0) {
            console.log('');
            console.log('üéâ SUCESSO! NOTIFICA√á√ïES ENVIADAS!');
            console.log('üì± Verifique seu Telegram para ver as informa√ß√µes dos produtos e pre√ßos!');
          } else {
            console.log('');
            console.log('‚ÑπÔ∏è Nenhuma notifica√ß√£o enviada (normal se n√£o h√° produtos cadastrados).');
          }
        }
      } else {
        console.log(`‚ö†Ô∏è API do scheduler retornou: ${schedulerResponse.status}`);
      }
    } catch (error) {
      console.log(`‚ùå Erro na API: ${error.message}`);
    }

    // Testar Telegram
    console.log('');
    console.log('üì± Testando Telegram...');
    
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID;
    
    if (BOT_TOKEN && CHAT_ID) {
      try {
        const telegramUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
        const telegramResponse = await fetch(telegramUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: CHAT_ID,
            text: `üöÄ **DEPLOY CONCLU√çDO COM SUCESSO!**\n\n‚úÖ Sistema de monitoramento em produ√ß√£o funcionando!\n\nüåê **URL:** ${urlFuncionando}\n\nüìä **Pr√≥ximos passos:**\n‚Ä¢ Adicione produtos para monitorar\n‚Ä¢ Configure pre√ßos alvo\n‚Ä¢ Receba notifica√ß√µes autom√°ticas!\n\n‚è∞ ${new Date().toLocaleString('pt-BR')}`,
            parse_mode: 'Markdown'
          })
        });
        
        if (telegramResponse.ok) {
          console.log('‚úÖ Telegram funcionando! Mensagem de confirma√ß√£o enviada!');
        } else {
          const telegramError = await telegramResponse.json();
          console.log('‚ùå Erro no Telegram:', telegramError);
        }
      } catch (error) {
        console.log('‚ùå Erro ao testar Telegram:', error.message);
      }
    }

    console.log('');
    console.log('üéØ RESUMO FINAL:');
    console.log('‚úÖ Deploy conclu√≠do com sucesso');
    console.log(`‚úÖ Aplica√ß√£o funcionando em: ${urlFuncionando}`);
    console.log('‚úÖ API de monitoramento operacional');
    console.log('‚úÖ Telegram configurado e funcionando');
    console.log('');
    console.log('üöÄ SISTEMA PRONTO PARA USO!');
    console.log(`üì± Acesse: ${urlFuncionando}`);

  } else {
    console.log('‚ùå Nenhuma URL do Vercel est√° funcionando.');
    console.log('üí° Verifique se o deploy foi conclu√≠do com sucesso.');
    console.log('üí° Pode levar alguns minutos para o deploy ficar dispon√≠vel.');
  }
}

// Executar teste
testarURLsVercel();