/**
 * Script para testar o monitoramento de pre√ßos com Telegram no Vercel
 * Este script configura o monitoramento com intervalo personalizado em minutos
 */

const https = require('https');

// URL da API do seu aplicativo no Vercel
const API_URL = 'https://monitor-preco.vercel.app';

// Configura√ß√µes
const INTERVALO_MINUTOS = 15; // Intervalo de monitoramento em minutos

/**
 * Fun√ß√£o para fazer requisi√ß√µes HTTP
 */
async function fazerRequisicao(url, metodo = 'GET', dados = null) {
  return new Promise((resolve, reject) => {
    const options = {
      method: metodo,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const req = https.request(url, options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const resposta = JSON.parse(data);
          resolve({ statusCode: res.statusCode, dados: resposta });
        } catch (erro) {
          resolve({ statusCode: res.statusCode, dados: data });
        }
      });
    });
    
    req.on('error', (erro) => {
      reject(erro);
    });
    
    if (dados) {
      req.write(JSON.stringify(dados));
    }
    
    req.end();
  });
}

/**
 * Fun√ß√£o para verificar o status do agendador
 */
async function verificarStatusAgendador() {
  try {
    console.log('üìä Verificando status do agendador...');
    const resposta = await fazerRequisicao(`${API_URL}/api/scheduler`);
    
    if (resposta.statusCode === 200) {
      console.log(`‚úÖ Status do agendador: ${resposta.dados.isRunning ? 'ATIVO' : 'INATIVO'}`);
      return resposta.dados;
    } else {
      console.error(`‚ùå Erro ao verificar status: ${resposta.statusCode}`);
      return null;
    }
  } catch (erro) {
    console.error('‚ùå Erro ao verificar status do agendador:', erro);
    return null;
  }
}

/**
 * Fun√ß√£o para iniciar o agendador com intervalo personalizado
 */
async function iniciarAgendador(intervaloMinutos) {
  try {
    console.log(`üöÄ Iniciando agendador com intervalo de ${intervaloMinutos} minutos...`);
    
    const resposta = await fazerRequisicao(
      `${API_URL}/api/scheduler`,
      'POST',
      {
        action: 'start',
        intervalMinutes: intervaloMinutos
      }
    );
    
    if (resposta.statusCode === 200) {
      console.log(`‚úÖ Agendador iniciado: ${resposta.dados.message}`);
      return true;
    } else {
      console.error(`‚ùå Erro ao iniciar agendador: ${resposta.statusCode}`);
      console.error(resposta.dados);
      return false;
    }
  } catch (erro) {
    console.error('‚ùå Erro ao iniciar agendador:', erro);
    return false;
  }
}

/**
 * Fun√ß√£o para executar verifica√ß√£o manual
 */
async function executarVerificacaoManual() {
  try {
    console.log('üîç Executando verifica√ß√£o manual de pre√ßos...');
    
    const resposta = await fazerRequisicao(
      `${API_URL}/api/scheduler`,
      'POST',
      {
        action: 'manual'
      }
    );
    
    if (resposta.statusCode === 200) {
      console.log(`‚úÖ Verifica√ß√£o manual executada: ${resposta.dados.message}`);
      return true;
    } else {
      console.error(`‚ùå Erro na verifica√ß√£o manual: ${resposta.statusCode}`);
      console.error(resposta.dados);
      return false;
    }
  } catch (erro) {
    console.error('‚ùå Erro na verifica√ß√£o manual:', erro);
    return false;
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  console.log('ü§ñ TESTE DE MONITORAMENTO COM TELEGRAM NO VERCEL');
  console.log('==============================================');
  
  // Verificar status atual
  const statusInicial = await verificarStatusAgendador();
  
  if (!statusInicial) {
    console.error('‚ùå N√£o foi poss√≠vel verificar o status do agendador. Verifique se o aplicativo est√° online no Vercel.');
    return;
  }
  
  // Iniciar agendador com intervalo personalizado
  const sucesso = await iniciarAgendador(INTERVALO_MINUTOS);
  
  if (sucesso) {
    console.log(`‚úÖ Monitoramento configurado com sucesso para verificar a cada ${INTERVALO_MINUTOS} minutos.`);
    console.log('üì± Voc√™ receber√° notifica√ß√µes no Telegram quando os pre√ßos dos produtos monitorados baixarem.');
    
    // Executar verifica√ß√£o manual para testar
    console.log('\nüß™ Executando teste de verifica√ß√£o manual...');
    await executarVerificacaoManual();
    
    console.log('\n‚úÖ CONFIGURA√á√ÉO CONCLU√çDA');
    console.log('O monitoramento est√° ativo e funcionando no Vercel.');
    console.log(`Intervalo de verifica√ß√£o: ${INTERVALO_MINUTOS} minutos`);
  } else {
    console.error('‚ùå N√£o foi poss√≠vel configurar o monitoramento. Verifique os logs acima para mais detalhes.');
  }
}

// Executar o script
main().catch(console.error);