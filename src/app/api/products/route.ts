import { NextRequest, NextResponse } from 'next/server';
import { getDatabaseAdapter } from '@/lib/database-adapter-fixed';
import { cookies } from 'next/headers';
import { createPriceScraper } from '@/lib/scraper';
import { getHttpScraper } from '@/lib/scraper-http';

export async function GET() {
  try {
    // Verificar autentica√ß√£o
    const cookieStore = await cookies();
    const userIdCookie = cookieStore.get('user_id');
    
    if (!userIdCookie) {
      return NextResponse.json(
        { error: 'N√£o autenticado' },
        { status: 401 }
      );
    }

    const userId = parseInt(userIdCookie.value);
    if (isNaN(userId)) {
      return NextResponse.json(
        { error: 'ID de usu√°rio inv√°lido' },
        { status: 401 }
      );
    }

    // Buscar produtos do usu√°rio
    const DatabaseAdapter = getDatabaseAdapter();
    const products = await DatabaseAdapter.getProductsByUserId(userId);

    return NextResponse.json({ products });

  } catch (error) {
    console.error('Erro ao buscar produtos:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîç Iniciando POST /api/products');
    
    // Verificar autentica√ß√£o
    const cookieStore = await cookies();
    const userIdCookie = cookieStore.get('userId');
    
    if (!userIdCookie) {
      console.log('‚ùå Usu√°rio n√£o autenticado');
      return NextResponse.json(
        { error: 'N√£o autorizado' },
        { status: 401 }
      );
    }

    const userId = parseInt(userIdCookie.value);
    console.log('üë§ Usu√°rio autenticado:', userId);

    const body = await request.json();
    console.log('üìã Dados recebidos:', body);
    const { name, url, target_price, store } = body;

    // Valida√ß√µes
    if (!name || typeof name !== 'string' || name.trim() === '') {
      return NextResponse.json(
        { error: 'Nome do produto √© obrigat√≥rio' },
        { status: 400 }
      );
    }

    if (!url || typeof url !== 'string' || url.trim() === '') {
      return NextResponse.json(
        { error: 'URL √© obrigat√≥ria' },
        { status: 400 }
      );
    }

    // Validar se √© uma URL v√°lida
    try {
      new URL(url);
    } catch {
      return NextResponse.json(
        { error: 'URL inv√°lida' },
        { status: 400 }
      );
    }

    if (!target_price || typeof target_price !== 'number' || target_price <= 0) {
      return NextResponse.json(
        { error: 'Pre√ßo alvo deve ser um n√∫mero positivo' },
        { status: 400 }
      );
    }

    if (!store || typeof store !== 'string' || store.trim() === '') {
      return NextResponse.json(
        { error: 'Loja √© obrigat√≥ria' },
        { status: 400 }
      );
    }

    // Fazer scraping autom√°tico do pre√ßo atual
    let currentPrice: number | null = null;
    try {
      console.log(`üîç Fazendo scraping autom√°tico da URL: ${url}`);
      
      // Tentar primeiro com HTTP scraper (mais r√°pido)
      const httpScraper = getHttpScraper();
      const httpResult = await httpScraper.scrapePriceHttp(url);
      
      if (httpResult.success && httpResult.price && httpResult.price > 0) {
        currentPrice = httpResult.price;
        console.log(`‚úÖ Pre√ßo atual capturado via HTTP: R$ ${currentPrice}`);
      } else {
        // Fallback para Puppeteer se HTTP falhar
        console.log('‚ö†Ô∏è HTTP falhou, tentando com Puppeteer...');
        const scraper = createPriceScraper();
        const puppeteerResult = await scraper.scrapePriceAuto(url);
        
        if (puppeteerResult.success && puppeteerResult.price && puppeteerResult.price > 0) {
          currentPrice = puppeteerResult.price;
          console.log(`‚úÖ Pre√ßo atual capturado via Puppeteer: R$ ${currentPrice}`);
        } else {
          console.log('‚ö†Ô∏è N√£o foi poss√≠vel capturar o pre√ßo automaticamente');
        }
      }
    } catch (error) {
      console.error('‚ùå Erro no scraping autom√°tico:', error);
    }

    // Criar produto no banco
    const DatabaseAdapter = getDatabaseAdapter();
    const product = await DatabaseAdapter.createProduct({
      user_id: userId,
      name: name.trim(),
      url: url.trim(),
      target_price,
      current_price: currentPrice || undefined,
      store: store.trim()
    });

    console.log('‚úÖ Produto criado com sucesso:', product);

    return NextResponse.json({
      message: 'Produto adicionado com sucesso',
      product
    }, { status: 201 });

  } catch (error) {
    console.error('‚ùå Erro ao criar produto:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    console.log('üîç PUT /api/products - Iniciando atualiza√ß√£o de produto');
    
    // Verificar autentica√ß√£o
    const cookieStore = await cookies();
    const userIdCookie = cookieStore.get('user_id');
    
    if (!userIdCookie) {
      console.log('‚ùå Cookie user_id n√£o encontrado');
      return NextResponse.json(
        { error: 'N√£o autenticado' },
        { status: 401 }
      );
    }

    const userId = parseInt(userIdCookie.value);
    console.log('üë§ User ID obtido:', userId);
    
    if (isNaN(userId)) {
      console.log('‚ùå User ID inv√°lido');
      return NextResponse.json(
        { error: 'ID de usu√°rio inv√°lido' },
        { status: 401 }
      );
    }

    const body = await request.json();
    console.log('üìã Dados recebidos:', body);
    const { id, name, url, target_price, store, is_active } = body;

    if (!id || typeof id !== 'number') {
      console.log('‚ùå ID do produto inv√°lido:', id, typeof id);
      return NextResponse.json(
        { error: 'ID do produto √© obrigat√≥rio' },
        { status: 400 }
      );
    }

    console.log('üîç Verificando se produto existe e pertence ao usu√°rio...');
    // Verificar se o produto pertence ao usu√°rio
    const DatabaseAdapter = getDatabaseAdapter();
    const existingProduct = await DatabaseAdapter.getProductById(id);
    console.log('üì¶ Produto existente:', existingProduct);
    
    if (!existingProduct || existingProduct.user_id !== userId) {
      console.log('‚ùå Produto n√£o encontrado ou n√£o autorizado');
      return NextResponse.json(
        { error: 'Produto n√£o encontrado ou n√£o autorizado' },
        { status: 404 }
      );
    }

    console.log('üîÑ Chamando updateProduct com dados:', {
      id,
      userId,
      updateData: {
        name: name?.trim(),
        url: url?.trim(),
        target_price,
        store: store?.trim(),
        is_active
      }
    });

    // Atualizar produto
    const updatedProduct = await DatabaseAdapter.updateProduct(id, userId, {
      name: name?.trim(),
      url: url?.trim(),
      target_price,
      store: store?.trim(),
      is_active
    });

    console.log('‚úÖ Produto atualizado com sucesso:', updatedProduct);

    return NextResponse.json({
      message: 'Produto atualizado com sucesso',
      product: updatedProduct
    });

  } catch (error) {
    console.error('‚ùå Erro ao atualizar produto:', error);
    console.error('Stack trace:', error instanceof Error ? error.stack : 'No stack trace available');
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}