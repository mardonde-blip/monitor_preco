const fs = require('fs');
const path = require('path');
const https = require('https');

// Fun√ß√£o para fazer requisi√ß√µes HTTP
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const req = https.request(url, options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          resolve(JSON.parse(data));
        } catch (e) {
          resolve(data);
        }
      });
    });
    req.on('error', reject);
    if (options.body) {
      req.write(options.body);
    }
    req.end();
  });
}

// Fun√ß√£o para testar API do Telegram diretamente
async function testTelegramAPI(botToken, chatId) {
  try {
    console.log('\nüîç Testando API do Telegram diretamente...');
    
    // Teste 1: Verificar se o bot √© v√°lido
    const botInfo = await makeRequest(`https://api.telegram.org/bot${botToken}/getMe`);
    if (!botInfo.ok) {
      console.log('‚ùå Bot Token inv√°lido:', botInfo.description);
      return false;
    }
    console.log('‚úÖ Bot Token v√°lido:', botInfo.result.username);
    
    // Teste 2: Verificar se o chat ID √© v√°lido
    const chatInfo = await makeRequest(`https://api.telegram.org/bot${botToken}/getChat?chat_id=${chatId}`);
    if (!chatInfo.ok) {
      console.log('‚ùå Chat ID inv√°lido:', chatInfo.description);
      return false;
    }
    console.log('‚úÖ Chat ID v√°lido:', chatInfo.result.type, chatInfo.result.first_name || chatInfo.result.title);
    
    // Teste 3: Enviar mensagem de teste
    const testMessage = await makeRequest(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: 'üß™ TESTE DE DIAGN√ìSTICO\n\nSe voc√™ recebeu esta mensagem, o Telegram est√° funcionando corretamente!\n\n‚è∞ ' + new Date().toLocaleString('pt-BR'),
        parse_mode: 'HTML'
      })
    });
    
    if (!testMessage.ok) {
      console.log('‚ùå Falha ao enviar mensagem:', testMessage.description);
      return false;
    }
    console.log('‚úÖ Mensagem de teste enviada com sucesso!');
    return true;
    
  } catch (error) {
    console.log('‚ùå Erro ao testar API do Telegram:', error.message);
    return false;
  }
}

// Fun√ß√£o para testar API local do sistema
async function testLocalAPI() {
  try {
    console.log('\nüîç Testando API local do sistema...');
    
    // Teste 1: Verificar status do scheduler
    const schedulerStatus = await makeRequest('http://localhost:3000/api/scheduler');
    console.log('üìä Status do Scheduler:', schedulerStatus.isRunning ? 'Ativo' : 'Inativo');
    
    // Teste 2: Testar API de teste do Telegram
    const telegramTest = await makeRequest('http://localhost:3000/api/telegram/test', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (telegramTest.success) {
      console.log('‚úÖ API local do Telegram funcionando');
    } else {
      console.log('‚ùå API local do Telegram com problema:', telegramTest.error);
    }
    
  } catch (error) {
    console.log('‚ùå Erro ao testar API local:', error.message);
    console.log('üí° Certifique-se de que o servidor est√° rodando em http://localhost:3000');
  }
}

// Fun√ß√£o para verificar configura√ß√µes
function checkConfigurations() {
  console.log('\nüîç Verificando configura√ß√µes...');
  
  // Verificar .env.local
  const envPath = path.join(process.cwd(), '.env.local');
  if (!fs.existsSync(envPath)) {
    console.log('‚ùå Arquivo .env.local n√£o encontrado');
    return null;
  }
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  const botTokenMatch = envContent.match(/TELEGRAM_BOT_TOKEN=(.+)/);
  const chatIdMatch = envContent.match(/TELEGRAM_CHAT_ID=(.+)/);
  
  const botToken = botTokenMatch ? botTokenMatch[1].trim() : null;
  const chatId = chatIdMatch ? chatIdMatch[1].trim() : null;
  
  console.log('üìÑ Arquivo .env.local encontrado');
  console.log('ü§ñ Bot Token:', botToken ? (botToken.length > 10 ? '‚úÖ Configurado' : '‚ùå Muito curto') : '‚ùå N√£o encontrado');
  console.log('üí¨ Chat ID:', chatId ? (chatId !== 'your_chat_id_here' ? '‚úÖ Configurado' : '‚ùå Ainda √© placeholder') : '‚ùå N√£o encontrado');
  
  return { botToken, chatId };
}

// Fun√ß√£o para verificar localStorage simulado
function checkLocalStorage() {
  console.log('\nüîç Verificando configura√ß√µes do localStorage...');
  
  // Simular localStorage para Node.js
  global.localStorage = {
    getItem: (key) => {
      try {
        const filePath = path.join(process.cwd(), `localStorage_${key}.json`);
        if (fs.existsSync(filePath)) {
          return fs.readFileSync(filePath, 'utf8');
        }
      } catch (e) {}
      return null;
    }
  };
  
  // Verificar produtos
  const productsData = localStorage.getItem('products');
  const products = productsData ? JSON.parse(productsData) : [];
  console.log('üì¶ Produtos cadastrados:', products.length);
  
  if (products.length > 0) {
    console.log('   Produtos:');
    products.forEach((product, index) => {
      console.log(`   ${index + 1}. ${product.name} - Pre√ßo alvo: R$ ${product.targetPrice?.toFixed(2) || 'N/A'}`);
    });
  }
  
  // Verificar configura√ß√µes de notifica√ß√£o
  const settingsData = localStorage.getItem('notification-settings');
  const settings = settingsData ? JSON.parse(settingsData) : null;
  
  if (settings) {
    console.log('‚öôÔ∏è Configura√ß√µes de notifica√ß√£o:');
    console.log('   Habilitadas:', settings.enabled ? '‚úÖ Sim' : '‚ùå N√£o');
    console.log('   Bot Token:', settings.telegram?.botToken ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
    console.log('   Chat ID:', settings.telegram?.chatId ? '‚úÖ Configurado' : '‚ùå N√£o configurado');
  } else {
    console.log('‚ùå Configura√ß√µes de notifica√ß√£o n√£o encontradas no localStorage');
  }
  
  return { products, settings };
}

// Fun√ß√£o principal de diagn√≥stico
async function runDiagnosis() {
  console.log('üîç DIAGN√ìSTICO COMPLETO DO SISTEMA DE NOTIFICA√á√ïES TELEGRAM');
  console.log('=' .repeat(70));
  
  // 1. Verificar configura√ß√µes
  const envConfig = checkConfigurations();
  const localData = checkLocalStorage();
  
  // 2. Testar API do Telegram se as configura√ß√µes estiverem OK
  if (envConfig && envConfig.botToken && envConfig.chatId && envConfig.chatId !== 'your_chat_id_here') {
    await testTelegramAPI(envConfig.botToken, envConfig.chatId);
  } else {
    console.log('\n‚ö†Ô∏è Pulando teste da API do Telegram - configura√ß√µes incompletas');
  }
  
  // 3. Testar API local
  await testLocalAPI();
  
  // 4. Resumo e recomenda√ß√µes
  console.log('\nüìã RESUMO E RECOMENDA√á√ïES:');
  console.log('=' .repeat(50));
  
  if (!envConfig || !envConfig.botToken) {
    console.log('‚ùå PROBLEMA: Bot Token n√£o configurado no .env.local');
    console.log('   SOLU√á√ÉO: Adicione TELEGRAM_BOT_TOKEN=seu_token no .env.local');
  }
  
  if (!envConfig || !envConfig.chatId || envConfig.chatId === 'your_chat_id_here') {
    console.log('‚ùå PROBLEMA: Chat ID n√£o configurado no .env.local');
    console.log('   SOLU√á√ÉO: Use @userinfobot no Telegram para obter seu Chat ID');
  }
  
  if (!localData.settings || !localData.settings.enabled) {
    console.log('‚ùå PROBLEMA: Notifica√ß√µes desabilitadas na interface');
    console.log('   SOLU√á√ÉO: Acesse http://localhost:3000 e habilite as notifica√ß√µes');
  }
  
  if (localData.products.length === 0) {
    console.log('‚ö†Ô∏è AVISO: Nenhum produto cadastrado para monitoramento');
    console.log('   SOLU√á√ÉO: Adicione produtos na interface web');
  }
  
  console.log('\n‚úÖ Para testar o sistema completo:');
  console.log('   1. Configure o Chat ID no .env.local');
  console.log('   2. Habilite as notifica√ß√µes na interface web');
  console.log('   3. Adicione produtos com pre√ßos alvo');
  console.log('   4. Inicie o scheduler autom√°tico');
  console.log('   5. Execute uma verifica√ß√£o manual');
}

// Executar diagn√≥stico
runDiagnosis().catch(console.error);