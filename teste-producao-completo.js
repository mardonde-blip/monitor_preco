// Teste completo do monitoramento em produ√ß√£o
require('dotenv').config({ path: '.env.local' });

// URL da aplica√ß√£o em produ√ß√£o (substitua pela URL real do Vercel)
const PRODUCTION_URL = 'https://monitor-precos-git-main-mardos-projects-b8b8b8b8.vercel.app'; // Ajuste conforme necess√°rio

async function testarProducao() {
  console.log('üåê TESTE COMPLETO EM PRODU√á√ÉO');
  console.log('=============================');
  console.log(`üîó URL: ${PRODUCTION_URL}`);
  console.log('');

  try {
    // 1. Testar se a aplica√ß√£o est√° online
    console.log('1Ô∏è‚É£ Verificando se a aplica√ß√£o est√° online...');
    const healthResponse = await fetch(PRODUCTION_URL);
    
    if (!healthResponse.ok) {
      throw new Error(`Aplica√ß√£o offline: ${healthResponse.status}`);
    }
    
    console.log('‚úÖ Aplica√ß√£o online e funcionando!');
    console.log('');

    // 2. Testar API do scheduler em produ√ß√£o
    console.log('2Ô∏è‚É£ Testando API do scheduler em produ√ß√£o...');
    
    const schedulerResponse = await fetch(`${PRODUCTION_URL}/api/scheduler`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    });
    
    if (!schedulerResponse.ok) {
      console.log(`‚ö†Ô∏è API do scheduler retornou: ${schedulerResponse.status}`);
      const errorText = await schedulerResponse.text();
      console.log('Erro:', errorText);
    } else {
      const resultado = await schedulerResponse.json();
      console.log('‚úÖ API do scheduler funcionando!');
      console.log('üìä Resultado:', JSON.stringify(resultado, null, 2));
      
      if (resultado.success && resultado.data) {
        const { checked, notifications, errors } = resultado.data;
        
        console.log('');
        console.log('üìä ESTAT√çSTICAS DA VERIFICA√á√ÉO:');
        console.log(`üì¶ Produtos verificados: ${checked || 0}`);
        console.log(`üì± Notifica√ß√µes enviadas: ${notifications || 0}`);
        console.log(`‚ùå Erros encontrados: ${errors || 0}`);
        
        if (notifications > 0) {
          console.log('');
          console.log('üéâ SUCESSO! NOTIFICA√á√ïES ENVIADAS!');
          console.log('üì± Verifique seu Telegram para ver as informa√ß√µes dos produtos e pre√ßos!');
          console.log('');
          console.log('üìã As notifica√ß√µes devem conter:');
          console.log('   ‚Ä¢ üì¶ Nome do produto');
          console.log('   ‚Ä¢ üí∞ Pre√ßo anterior vs pre√ßo atual');
          console.log('   ‚Ä¢ üéØ Percentual de desconto');
          console.log('   ‚Ä¢ üîó Link direto para o produto');
          console.log('   ‚Ä¢ ‚è∞ Data e hora da verifica√ß√£o');
        } else {
          console.log('');
          console.log('‚ÑπÔ∏è Nenhuma notifica√ß√£o enviada.');
          console.log('üí° Para receber notifica√ß√µes:');
          console.log(`   1. Acesse ${PRODUCTION_URL}`);
          console.log('   2. Adicione um produto');
          console.log('   3. Configure um pre√ßo alvo MENOR que o atual');
          console.log('   4. Execute este teste novamente');
        }
      }
    }

    console.log('');
    console.log('3Ô∏è‚É£ Testando conectividade com Telegram...');
    
    // 3. Testar Telegram diretamente
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID;
    
    if (BOT_TOKEN && CHAT_ID) {
      const telegramUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
      const telegramResponse = await fetch(telegramUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: `üöÄ **TESTE DE PRODU√á√ÉO**\n\nSistema de monitoramento em produ√ß√£o funcionando!\n\nüåê URL: ${PRODUCTION_URL}\n‚è∞ ${new Date().toLocaleString('pt-BR')}`,
          parse_mode: 'Markdown'
        })
      });
      
      if (telegramResponse.ok) {
        console.log('‚úÖ Telegram funcionando em produ√ß√£o!');
        console.log('üì± Mensagem de teste enviada!');
      } else {
        const telegramError = await telegramResponse.json();
        console.log('‚ùå Erro no Telegram:', telegramError);
      }
    } else {
      console.log('‚ö†Ô∏è Vari√°veis do Telegram n√£o configuradas');
    }

  } catch (error) {
    console.error('‚ùå Erro no teste de produ√ß√£o:', error.message);
    
    if (error.message.includes('fetch')) {
      console.log('üí° Dica: Verifique se a URL de produ√ß√£o est√° correta');
      console.log('üí° Dica: Verifique se o deploy foi conclu√≠do com sucesso');
    }
  }

  console.log('');
  console.log('üéØ RESUMO DO TESTE:');
  console.log('‚úÖ Sistema em produ√ß√£o testado');
  console.log('‚úÖ API de monitoramento verificada');
  console.log('‚úÖ Conectividade com Telegram testada');
  console.log('');
  console.log('üöÄ PR√ìXIMOS PASSOS:');
  console.log(`1. Acesse ${PRODUCTION_URL}`);
  console.log('2. Adicione produtos para monitorar');
  console.log('3. Configure pre√ßos alvo');
  console.log('4. Receba notifica√ß√µes autom√°ticas no Telegram!');
}

// Executar teste
testarProducao();